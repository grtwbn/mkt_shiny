dt
my_options <- list(width="600px", height="300px",
title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
plot(gvisScatterChart(dt,options=my_options))
dt$cyl_4 <- ifelse(mtcars$cyl == 4, dt$mpg, NA)
dt$cyl_6 <- ifelse(mtcars$cyl == 6, dt$mpg, NA)
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl == 4, dt$mpg, NA)
dt$cyl_6 <- ifelse(mtcars$cyl == 6, dt$mpg, NA)
dt$cyl_8 <- ifelse(mtcars$cyl == 8, dt$mpg, NA)
dt$mpg <- NULL
dt
my_options <- list(width = "600px", height="300px",
hAxis = "{title:'Weight (1000 lbs)'}",
explorer = "{ actions: ['dragToZoom', 'rightClickToReset'] }"" )
plot(gvisScatterChart(dt,options=my_options))
my_options <- list(width = "600px", height="300px",
title = "Motor Trend Car Road Tests",
hAxis = "{title:'Weight (1000 lbs)'}",
vAxis = "{title:'Miles/(US) gallon'}",
explorer = "{ actions: ['dragToZoom', 'rightClickToReset'] }")
plot(gvisScatterChart(dt,options=my_options))
my_options <- list(width = "600px", height="300px",
title = "Motor Trend Car Road Tests",
hAxis = "{title:'Weight (1000 lbs)'}",
vAxis = "{title:'Miles/(US) gallon'}",
explorer = "{ actions: ['dragToZoom', 'rightClickToReset']}" )
plot(gvisScatterChart(dt,options=my_options))
dt = mtcars[,c("wt", "mpg")]
dt$cyl_4 = ifelse(mtcars$cyl == 4, dt$mpg, NA)
dt$cyl_4.html.tooltip <- rownames(dt)
dt$cyl_6  = ifelse(mtcars$cyl == 6, dt$mpg, NA)
dt$cyl_6.html.tooltip <- rownames(dt)
dt$cyl_8 = ifelse(mtcars$cyl == 8, dt$mpg, NA)
dt$cyl_8.html.tooltip <- rownames(dt)
dt$mpg = NULL
dt
my_options <- list(width = "600px", height="300px",
title = "Motor Trend Car Road Tests",
hAxis = "{title:'Weight (1000 lbs)'}",
vAxis = "{title:'Miles/(US) gallon'}",
explorer = "{ actions: ['dragToZoom', 'rightClickToReset']}" )
plot(gvisScatterChart(dt,options=my_options))
dt %>%
rowmnames_to_column('cyl_4.tooltip') %>%
mutate(cyl_6.tooltip = cyl_4.tooltip,
cyl_8.tooltip = cyl_4.tooltip) %>%
select(wt, cyl_4, cyl_4.tooltip, cyl_6, cyl_6.tooltip, cyl_8, cyl_8.tooltip)
dt %>%
rowmnames_to_column('cyl_4.tooltip') %>%
mutate(cyl_6.tooltip = cyl_4.tooltip,
cyl_8.tooltip = cyl_4.tooltip) %>%
select(wt, cyl_4, cyl_4.tooltip, cyl_6, cyl_6.tooltip, cyl_8, cyl_8.tooltip)
plot(gvisScatterChart(dt,options=my_options))
devtools::install_github('rstudio/leaflet')
install.packages('devtools')
install.packages("devtools")
install.packages('shiny')
shiny::runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
install.packages(c("data.table", "dplyr", "fs", "gower", "lubridate", "recipes", "rJava", "survival", "tidyr", "tinytex"))
library(dygraphs)
install.packages("dygraphs")
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
library(shiny)
library(dygraphs)
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
dashboardPage(
dashboardHeader(title='Expectations Game'),
dashboardSidebar(sidebarPanel('Market Valution Approaches')),
sidebarMenu(
menuItem('U.S. Treasury Security', tabName = 'Treasuries'),
menuItem('S&P 500 Dividend Yield (%)', tabName = 'S&P Dividend x / %'),
menuItem('S&P 500 Earnings Yield (%) / Multiple (x)', tabName = 'S&P Earnings x / %'),
menuItem('Shiller PE 10 ', tabName = 'Shiller T10 x / %'),
menuItem('Allocation-Based Returns', tabName = 'Allocation-based')
)
)
dashboardBody(
tabItems(
tabItem(tabName = "Treasuries",
tabsetPanel(type = "tabs",
tabPanel("Data",
fluidRow(box(DT::dataTableOutput('table1'),width = 12))
),
tabPanel('Analysis',
fluidRow(column(width=6,
selectizeInput("selected",'Stocks',
choice=unique(tidy_xts$stock))),
column(width=6,
selectizeInput("typeselect", "Select Types:",
choices=unique(stocksTidy1$type),
selected = 'Open')
)
),
fluidRow(box(dygraphOutput('dygraph')),
box(dygraphOutput('dygraph1')))
))
)
)
)
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
library(shinydashboard)
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
runApp('resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny')
library(dplyr)
data = read.csv('allocation-based_stock_market_returns.csv')
data
print(data)
knitr::opts_chunk$set(echo = TRUE)
data = read.csv('allocation-based_stock_market_returns.csv')
setwd("~/resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny")
data = read.csv('allocation-based_stock_market_returns.csv')
data
library(DT)
runApp()
setwd("~/resilio_sync/rs_data_science_nycdsa/_project_2_shiny/proj_2_shiny")
runApp()
?tabPanel
??tabPanel
shiny::runApp()
runApp()
?dygraph
t10 = read.csv('10_year_treasury_constant_maturity_dgs10.csv', header = TRUE)
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/_project_2_shiny/proj_2_shiny")
library(shiny)
library(dygraphs)
library(shinydashboard)
library(dplyr)
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
t10 %>%
?gathter
t10 %>%
?gathter
t10 %>%
?gather
?gather
t10 %>%
??gather
library(tidyr)
t10 %>%
?gather
t10 %>%
??gather
?gather
t10 = read.csv('10_year_treasury_constant_maturity_dgs10.csv')[,-1] # remove header
runApp()
runApp()
dygraph(t10,main='10 Year Treasury')%>%
dyAxis("x", drawGrid = T)%>%
dySeries('Yield', label = 'Yield') %>%
dyRangeSelector(height=20)%>%
dyOptions(colors =brewer.pal(n = 8, name = "Dark2"))
dashboardPage(
dashboardHeader(title='Expectations Game'),
dashboardSidebar(
sidebarPanel('Market Valution Approaches'),
sidebarMenu(
menuItem('U.S. Treasury Security', tabName = 'treasury'),
menuItem('S&P 500 Dividend Yield (%)', tabName = 'sp_divi'),
menuItem('S&P 500 Earnings Yield (%) / Multiple (x)', tabName = 'sp_earn'),
menuItem('Shiller PE 10 ', tabName = 'shiller'),
menuItem('Allocation-Based Returns', tabName = 'exposures')
)
),
dashboardBody(
tabItems(
tabItem(tabName = "Treasuries",
tabsetPanel(type = "tabs",
tabPanel('Graph',
fluidRow(column(width=12,
selectizeInput("selected",'Stocks',
choices = unique(t10$DGS10))))
),
tabPanel("Support",
fluidRow(box(DT::dataTableOutput('table1'),width = 12))
),
fluidRow(box(dygraphOutput('dygraph')))
))
)
)
)
t10 = read.csv('10_year_treasury_constant_maturity_dgs10.csv')
t10 = read.csv('10_year_treasury_constant_maturity_dgs10.csv')[,-1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(t10)
runApp()
runApp()
runApp()
View(t10)
runApp()
runApp()
function(input,output){
output$dygraph <- renderDygraph({
dygraph(t10,main='10 Year Treasury')%>%
dyAxis("x", drawGrid = T)%>%
dySeries('Yield', label = 'Yield') %>%
dyRangeSelector(height=20)%>%
dyOptions(colors =brewer.pal(n = 8, name = "Dark2"))
})
output$table1 <- DT::renderDataTable({
datatable(t10, rownames=FALSE)
})
}
dygraph(t10,main='10 Year Treasury')%>%
dyAxis("x", drawGrid = T)%>%
dySeries('Yield', label = 'Yield') %>%
dyRangeSelector(height=20)%>%
dyOptions(colors =brewer.pal(n = 8, name = "Dark2"))
class(t10)
runApp()
?xts
library(xts)
xts(t10[, -1], as.Date(t10[, 1]))
runApp()
runApp()
View(t10)
View(t10)
runApp()
class(xts(t10[, -1], as.Date(t10[, 1])))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(RColorBrewer)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dygraphOutput
?dygraphOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
t10 = read.csv('10_year_treasury_constant_maturity_dgs10.csv')
runApp()
shiny::runApp()
shiny::runApp()
View(t10)
runApp()
runApp()
xts(t10[, -1], as.Date(t10[, 1]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(exposures)
View(exposures)
View(exposures)
View(exposures)
View(exposures)
View(exposures)
View(exposures)
View(exposures)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
xts(exposures[, -1], as.Date(exposures[, 1], format = '%m/%d/%Y'))
runApp()
shiny::runApp()
View(exposures)
runApp()
dyAxis('x', drawGrid = TRUE)
runApp()
runApp()
install.packages(xts)
install.packages('xts')
install.packages("xts")
install.packages('xts')
install.packages("xts")
library(xts)
shiny::runApp()
runApp()
runApp()
xts(exposures[, -1], as.Date(exposures[, 1], format = '%m/%d/%Y')) %>%
dygraph(main = 'Stock Market Exposure',
xlab = 'Date',
ylab = '10YRTR') %>%
#dyAxis('x', drawGrid = TRUE) %>%
#dySeries('V1', label = 'Market Exposure') %>%
dyAxis('y', label = 'Market Expsoure', valueRange = c('17', '55')) %>%
dyAxis('y2', label = 'S&P500 10YR TR CAGR', valueRange = c('17', '55')) %>%
dySeries('S&P500 10YR TR CAGR', axis = ('y2')) %>%
dyRangeSelector(height =50) %>%
dyOptions(colors = brewer.pal(n = 8, name = "Dark2"))
dygraph(main = 'Stock Market Exposure',
xlab = 'Date',
ylab = '10YRTR') %>%
runApp()
runApp()
renderDygraph({
xts(t10[, -1], as.Date(t10[, 1], format = '%m/%d/%Y')) %>%
dygraph(main = '10 Year Treasury') %>%
dyAxis('x', drawGrid = TRUE) %>%
dySeries('V1', label = 'Yield') %>%
dyAxis('y', valueRange = c('0', '17')) %>%
dyRangeSelector(height = 50) %>%
dyOptions(colors = brewer.pal(n = 8, name = "Dark2"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?dyAxis
runApp()
View(exposures)
runApp()
View(exposures)
runApp()
View(exposures)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# 1. 10 year treasury
t10y2y = read.csv('t10y2y.csv')
# 1. 10 year treasury
t10y2y = read.csv('t10y2y.csv')
# 1. 10 year treasury
t10 = read.csv('10_year_treasury_constant_maturity_dgs10.csv')
# 2. S&P 500 dividend yield
div_yield = read.csv('sp500_dividend_yield.csv')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(t10y2y)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(exposures)
View(exposures)
runApp()
runApp()
View(exposures)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(exposures)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
